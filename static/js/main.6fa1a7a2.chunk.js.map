{"version":3,"sources":["Map.js","App.js","serviceWorker.js","index.js"],"names":["mapStyles","position","width","height","CurrentLocation","props","initialCenter","lat","lng","state","currentLocation","prevProps","prevState","google","this","loadMap","recenterMap","centerAroundCurrentLocation","navigator","geolocation","getCurrentPosition","pos","coords","setState","latitude","longitude","map","current","maps","center","LatLng","panTo","mapRef","refs","node","ReactDOM","findDOMNode","zoom","mapConfig","Object","assign","Map","event","addListener","moveMarker","children","React","Children","c","cloneElement","mapCenter","style","ref","renderChildren","Component","defaultProps","visible","MapContainer","latLng","showingInfoWindow","checkTimeZone","onMarkerClick","marker","e","selectedPlace","activeMarker","onClose","dayStatus","countryName","axios","get","mode","then","response","console","log","data","localTimeStamp","timestamp","checkDayLimit","catch","error","sunriseTime","Date","results","sunrise","getTime","sunsetTime","sunset","onClick","GoogleApiWrapper","apiKey","Boolean","window","location","hostname","match","render","App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6fa1a7a2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nconst mapStyles = {\r\n    map: {\r\n        position: \"absolute\",\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n    },\r\n};\r\n\r\nexport class CurrentLocation extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const { lat, lng } = this.props.initialCenter;\r\n        this.state = {\r\n            currentLocation: {\r\n                lat,\r\n                lng,\r\n            },\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevProps.google !== this.props.google) {\r\n            this.loadMap();\r\n        }\r\n        if (prevState.currentLocation !== this.props.state.currentLocation) {\r\n            this.recenterMap();\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.centerAroundCurrentLocation) {\r\n            if (navigator && navigator.geolocation) {\r\n                navigator.geolocation.getCurrentPosition(pos => {\r\n                    const coords = pos.coords;\r\n                    this.setState({\r\n                        currentLocation: {\r\n                            lat: coords.latitude,\r\n                            lng: coords.longitude,\r\n                        },\r\n                    });\r\n                });\r\n            }\r\n        }\r\n        this.loadMap();\r\n    }\r\n\r\n    recenterMap() {\r\n        const map = this.map;\r\n        //console.log(\"this.map--->\", this.map);\r\n        if (this.props.state.currentLocation) {\r\n            const current = this.props.state.currentLocation;\r\n\r\n            const google = this.props.google;\r\n            const maps = google.maps;\r\n\r\n            if (map) {\r\n                let center = new maps.LatLng(current.lat, current.lng);\r\n                map.panTo(center);\r\n            }\r\n        }\r\n    }\r\n\r\n    loadMap() {\r\n        if (this.props && this.props.google) {\r\n            // checks if google is available\r\n            const { google } = this.props;\r\n            const maps = google.maps;\r\n            const mapRef = this.refs.map;\r\n\r\n            // reference to the actual DOM element\r\n            const node = ReactDOM.findDOMNode(mapRef);\r\n            let { zoom } = this.props;\r\n            const { lat, lng } = this.state.currentLocation;\r\n            var center = new maps.LatLng(lat, lng);\r\n            const mapConfig = Object.assign(\r\n                {},\r\n                {\r\n                    center,\r\n                    zoom,\r\n                },\r\n            );\r\n\r\n            this.map = new maps.Map(node, mapConfig);\r\n            google.maps.event.addListener(this.map, \"click\", this.props.moveMarker);\r\n        }\r\n    }\r\n\r\n    renderChildren() {\r\n        const { children } = this.props;\r\n\r\n        if (!children) return;\r\n        return React.Children.map(children, c => {\r\n            if (!c || !this.props.state.currentLocation) return;\r\n\r\n            return React.cloneElement(c, {\r\n                map: this.map,\r\n                google: this.props.google,\r\n                mapCenter: this.props.state.currentLocation,\r\n                position: this.props.state.currentLocation,\r\n                //name: this.props.state.countryName,\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const style = Object.assign({}, mapStyles.map);\r\n        return (\r\n            <div>\r\n                <div style={style} ref=\"map\">\r\n                    Loading map...\r\n                </div>\r\n                {this.renderChildren()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CurrentLocation;\r\n\r\nCurrentLocation.defaultProps = {\r\n    zoom: 5,\r\n    initialCenter: {\r\n        lat: 44.450622,\r\n        lng: 26.114591,\r\n    },\r\n    centerAroundCurrentLocation: true,\r\n    visible: true,\r\n};\r\n","import React from \"react\";\nimport { GoogleApiWrapper, InfoWindow, Marker } from \"google-maps-react\";\nimport axios from \"axios\";\nimport CurrentLocation from \"./Map\";\nimport \"./styles.scss\";\n\nexport class MapContainer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showingInfoWindow: true,\n            dayStatus: \"\",\n            activeMarker: {},\n            selectedPlace: {},\n            countryName: \"\",\n        };\n    }\n    moveMarker = event => {\n        //console.log(\"moveMarker--->\", InfoWindow);\n\n        this.setState({\n            currentLocation: {\n                lat: event.latLng.lat(),\n                lng: event.latLng.lng(),\n            },\n            showingInfoWindow: false,\n        });\n        this.checkTimeZone(event.latLng.lat(), event.latLng.lng());\n    };\n    onMarkerClick = (props, marker, e) => {\n        this.setState({\n            selectedPlace: props,\n            activeMarker: marker,\n            showingInfoWindow: true,\n        });\n    };\n    checkTimeZone(lat, lng) {\n        axios\n            .get(\"https://api.timezonedb.com/v2.1/get-time-zone?key=6F6YBU30VGBM&format=json&by=position&lat=\" + lat + \"&lng=\" + lng, { mode: \"no-cors\" })\n            .then(response => {\n                console.log(\"checkTimeZone response->\", response.data);\n                this.setState({ countryName: response.data.countryName, localTimeStamp: response.data.timestamp });\n                if (response.data.timestamp) this.checkDayLimit(lat, lng, response.data.timestamp);\n            })\n            .catch(error => {\n                console.log(error);\n            });\n    }\n    checkDayLimit(lat, lng, localTimeStamp) {\n        axios\n            .get(\"https://api.sunrise-sunset.org/json?lat=\" + lat + \"&lng=\" + lng + \"&formatted=0\", { mode: \"no-cors\" })\n            .then(response => {\n                console.log(\"checkTimeZone response->\", response.data);\n                var sunriseTime = new Date(response.data.results.sunrise).getTime() / 1000; //extract sunrise time and convert in UNIX time\n                var sunsetTime = new Date(response.data.results.sunset).getTime() / 1000; //extras sunset time and convert in UNIX time\n\n                //console.log(\"sunrise to compare--->\", sunriseTime, time, sunsetTime)\n                if (sunriseTime < localTimeStamp && localTimeStamp < sunsetTime) {\n                    //compare time to check if the time is in the day limits\n                    this.setState({ dayStatus: \"Daylight\" });\n                } else {\n                    this.setState({ dayStatus: \"Night\" });\n                }\n            })\n            .catch(error => {\n                console.log(error);\n            });\n    }\n    onClose = () => {\n        if (this.state.showingInfoWindow) {\n            this.setState({\n                showingInfoWindow: false,\n                activeMarker: null,\n            });\n        }\n    };\n\n    render() {\n        return (\n            <CurrentLocation centerAroundCurrentLocation google={this.props.google} moveMarker={this.moveMarker} state={this.state}>\n                <Marker onClick={this.onMarkerClick} />\n                <InfoWindow marker={this.state.activeMarker} visible={this.state.showingInfoWindow} onClose={this.onClose}>\n                    <div>\n                        <h2>{this.state.countryName === \"\" ? \"Loading...\" : this.state.countryName}</h2>\n                        <h4>{this.state.dayStatus === \"\" ? \"Loading...\" : this.state.dayStatus}</h4>\n                    </div>\n                </InfoWindow>\n            </CurrentLocation>\n        );\n    }\n}\n\nexport default GoogleApiWrapper({\n    apiKey: \"AIzaSyA2sDQZ-36NLlY4iMvoiuQ7mS1n-v8iq2M\",\n})(MapContainer);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}